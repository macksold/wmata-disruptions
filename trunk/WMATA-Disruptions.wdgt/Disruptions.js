// This file was generated by Dashcode from Apple Computer, Inc.
// You may edit this file to customize your Dashboard widget.

// From attributes.js
var htmlFeedURL = null;     // The feed to display
var numItemsToShow;         // Max number of items to display; -1 = all
var maxAgeToShow;           // Max age in days; 0 = today, -1 = all
var showDate;               // Whether to show the article dates

var feed = { url: null, title: "", baseURL: null };  // Object to hold information about the current feed
var last_updated = 0;                                // Track last refresh time to avoid excessive updates
var last_results = null;                             // Previous feed contents
var xml_request = null;                              // The current XMLHttpRequest
var loading_animation_timer = null;                  // Updates the "Loading..." animation's dots
var filterString = "";                               // String to filter results while searching
var slider;                                          // Article length slider element on the back
var contentarea;                                     // Feed content area element

// Namespace URLs
var NS_DC = "http://purl.org/dc/elements/1.1/";
var NS_CONTENT = "http://purl.org/rss/1.0/modules/content/";

function load()
{    
	setupParts();

	numItemsToShow = +attributes.numItemsToShow;
	maxAgeToShow   = +attributes.maxAgeToShow;
	showDate       = attributes.showDate == 1;

	slider = document.getElementById("slider");
	contentarea = document.getElementById("contentarea");
    
	if (window.widget) {
		htmlFeedURL = getFeedSource();		
		feed.url = htmlFeedURL;
	}
}

function remove()
{
	// your widget has just been removed from the layer
	// remove any preferences as needed
	// widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

function hide()
{
	// your widget has just been hidden stop any timers to
	// prevent cpu usage
}

function show()
{
	// your widget has just been shown.  restart any timers
	// and adjust your interface as needed
	var now = (new Date).getTime();
	
	// only check if 5 minutes have passed
	if ((now - last_updated) > 300000) {
		refreshFeed();
    }
}

//---------------------------------------------------------------------------------------------
//	refreshFeed()
//	Starts loading the feed source.
//---------------------------------------------------------------------------------------------
function refreshFeed()
{
	showLoadingMessage();
	if (xml_request != null) {
		xml_request.abort();
		xml_request = null;
	}
	xml_request = new XMLHttpRequest();

	xml_request.onload = function(e) {finishedLoadingXML(e, xml_request);}
	xml_request.overrideMimeType("text/xml");
	xml_request.open("GET", feed.url);
	xml_request.setRequestHeader("Cache-Control", "no-cache");
	xml_request.send(null);
}

//---------------------------------------------------------------------------------------------
//	showBack()
//	Show the back side of the widget.
//---------------------------------------------------------------------------------------------
function showBack(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToBack");

	front.style.display="none";
	back.style.display="block";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);
}

//---------------------------------------------------------------------------------------------
//	showFront()
//	Show the front side of the widget.
//---------------------------------------------------------------------------------------------
function showFront(event)
{
	// your widget needs to show the front

	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget)
		widget.prepareForTransition("ToFront");

	front.style.display="block";
	back.style.display="none";
	
	if (window.widget)
		setTimeout('widget.performTransition();', 0);

	refreshScrollArea();
}

//---------------------------------------------------------------------------------------------
//	refreshScrollArea()
//	Updates the content areas's scroll bar when the content or article length has changed.
//---------------------------------------------------------------------------------------------
function refreshScrollArea()
{
	contentarea.object.refresh();
}

//---------------------------------------------------------------------------------------------
//	getFeedSource()
//	Gets the feed URL from attributes.js and cleans it up.
//---------------------------------------------------------------------------------------------
function getFeedSource()
{
	var url = attributes.feedURL;

	if (url) {
		url = url.replace(/^feed:\/\//, "");
		if (url.substring(0,7).toLowerCase() != "http://") {
			url = "http://" + url;
		}
	}
	return url;
}

//---------------------------------------------------------------------------------------------
//	findChild()
//	Scans the children of a given DOM element for a node matching nodeName, optionally
//	in a given namespace.
//---------------------------------------------------------------------------------------------
function findChild(element, nodeName, namespace)
{
	var child;
	
	for (child = element.firstChild; child != null; child = child.nextSibling) {
		if (child.localName == nodeName) {
			if (namespace == null || child.namespaceURI == namespace)
				return child;
		}
	}
	
	return null;
}

//---------------------------------------------------------------------------------------------
//	finishedLoadingXML()
//	Extract the content of the RSS feed and store the data in a results array.
//---------------------------------------------------------------------------------------------
function finishedLoadingXML(e, request) 
{
	xml_request = null;
	hideLoadingMessage();
	if (request.responseXML) {		
		var contents = document.getElementById('content');

		// Remove the old entries
		removeEntriesFromContents(contents);
		
		// Get the top level element
		var feedRootElement = request.responseXML.documentElement;
		if (!feedRootElement) {
			showMessageInContents(contents, getLocalizedString("Invalid Feed"),
				getLocalizedString("%s does not appear to be a valid RSS or Atom feed.").replace("%s", feed.url));
			return;
		}

		var results;
		if (feedRootElement.tagName.toLowerCase() == "feed") {
			//&& feedRootElement.namespaceURI == "http://www.w3.org/2005/Atom") {
			results = parseAtomFeed(feedRootElement);			
		}
		else {
			// It's probably some version of RSS.
			// We don't care as long as it has <item>s
			results = parseRSSFeed(feedRootElement);
		}
		
		// Got no results?
		if (results == null || results.length < 1) {
			showMessageInContents(contents, getLocalizedString("No Items Found"),
				getLocalizedString("The feed does not contain any entries."));
			return;
		}
		
		// Save unfiltered results
		last_results = results;

		// Limit entries to top N, search terms, and date
		results = filterEntries(results);

		// Completely filtered out?
		if (results == null || results.length < 1) {
			showMessageInContents(contents, getLocalizedString("Nothing To Display"),
				getLocalizedString("The feed does not contain any entries within the specified criteria."));
			return;
		}

		// Generate the display
		addEntriesToContents(contents, results);

		// update the scrollbar so scrollbar matches new data
		refreshScrollArea();

		// Show new item indicator if necessary
		if (attributes.showUpdateBadge == 1) {
			checkNewItems(last_results, results);
		}

		// set last_updated to the current time to keep track of the last time a request was posted
		last_updated_date = new Date;
		last_updated = last_updated_date.getTime();
				
		document.getElementById('updatedText').innerText = date2str(last_updated_date);// = last_updated;
	}
}

function date2str(d)
{
  // hh:mm[AM/PM] M/D
  var hour = d.getHours() % 12;
  if(hour == 0) hour = 12;
  var minute = ((d.getMinutes() < 10) ? '0' : '') + d.getMinutes();
  var ampm = (d.getHours() > 12) ? "PM" : "AM";
  var month = d.getMonth() + 1;
  var day = d.getDate();
  
  return month + '/' + day + ' ' + hour + ':' + minute + ampm;
}

//---------------------------------------------------------------------------------------------
//	checkNewItems()
//	Determine how many new items have appeared since the last refresh
//---------------------------------------------------------------------------------------------
function checkNewItems(old_results, new_results)
{
	if (old_results == null) {
		// Just starting up, so everything is new, and no need to say so.
		return;
	}

	if (old_results.length == 0) {
		// If there are no old items, then all the new items are new
		if (new_results.length != 0) {
			// (If there are any)
			showNewCount(new_results.length);
			return;
		}
	}

	// Count the new items
	var newCount = 0;

	// Compare the last old item to the new items
	var old_item = old_results[0];
	for (var n = 0; n < new_results.length; n++) {
		var new_item = new_results[n];
		// Use the dates, if we're lucky enough to have them
		if (old_item.date && new_item.date) {
			if (new_item.date > old_item.date) {
				newCount++;
			}
			else {
				// Hit the end of the new stuff, so exit the loop
				break;
			}
		}
		else {
			// No date, so compare the titles
			if (new_item.title != old_item.title) {
				newCount++;
			}
			else {
				// We've seen this title before, so exit the loop
				break;			
			}
		}
	}
	
	if (newCount > 0) {
		showNewCount(newCount);
	}
}

//---------------------------------------------------------------------------------------------
//	showNewCount()
//	Display a new-items indicator.
//---------------------------------------------------------------------------------------------
function showNewCount(newCount)
{
	setLoadingText(getLocalizedString("%s new").replace("%s", newCount));
}

//---------------------------------------------------------------------------------------------
//	removeEntriesFromContents()
//	Clear the current content area.
//---------------------------------------------------------------------------------------------
function removeEntriesFromContents(contents)
{
	while (contents.hasChildNodes()) {
		contents.removeChild(contents.firstChild);
	}
}

//---------------------------------------------------------------------------------------------
//	addEntriesToContents()
//	Take the parsed results and display them in the content area.
//---------------------------------------------------------------------------------------------
function addEntriesToContents(contents, entries)
{
	// copy title and date into rows for display. Store link so it can be used when user
	// clicks on title
	nItems = entries.length;
				
	for (var i = 0; i < nItems; ++i) {
		var item = entries[i];
		var row = createRow (item.title, item.link, item.date, item.description, i);
		
		contents.appendChild (row);
	}
}

//---------------------------------------------------------------------------------------------
//	showMessageInContents()
//	Display a status or error message in the content area.
//---------------------------------------------------------------------------------------------
function showMessageInContents(contents, title, message)
{
	removeEntriesFromContents(contents);

	var titleElement = document.createElement("div");
	titleElement.setAttribute("class", "message-title");
	titleElement.innerText = title;

	var messageElement = document.createElement("div");
	messageElement.setAttribute("class", "message-body");
	messageElement.innerText = message;

	contents.appendChild(titleElement);
	contents.appendChild(messageElement);
	
	refreshScrollArea();
}

//---------------------------------------------------------------------------------------------
//	filterEntries()
//	Narrow down the RSS entries by configured date or maximum limits.
//---------------------------------------------------------------------------------------------
function filterEntries(entries)
{
	var result = new Array();
	
	// Set initial cutoff to "today" (midnight)
	var cutoffDate = new Date();
	cutoffDate.setHours(0, 0, 0, 0);

	// Max age is in days; 0 = today; -1 = "any date"
	// Subtract 24-hour periods to generate a cutoff date
	if (maxAgeToShow > 0) {
		cutoffDate.setTime(cutoffDate.getTime() - maxAgeToShow * 24 * 60 * 60 * 1000);
	}

	var regExp = new RegExp(filterString, "i");
	for (var i = 0; i < entries.length; i++) {
		// Have we reached the limit of items to show (-1 = all)
		if (numItemsToShow > 1 && i >= numItemsToShow)
			break;

		var entry = entries[i];
		var entryDate = entry.date;
		if (entryDate == null) {
			// No date, pretend it's today
			entryDate = new Date();
		}
		// Ignore cutoff date if "any date" (-1) was chosen
		if (maxAgeToShow == -1 || entryDate >= cutoffDate) {
			// If searching, filter by search string
			if(filterString=="" 
				|| (entry.title && entry.title.match(regExp)) 
				|| (entry.description && entry.description.match(regExp))){
				result.push(entry);
			}
		}
	}

	return result;
}

//---------------------------------------------------------------------------------------------
//	fixLinks()
//	Correct hyperlinks in a document fragment to use the openURL function.
//---------------------------------------------------------------------------------------------
function fixLinks(htmlFragment)
{
	// Collect all the links
	var links = htmlFragment.getElementsByTagName("a");
	for (var i = 0; i < links.length; i++) {
		var aNode = links[i];
		// Send them to our clickOnLink function
		aNode.onclick = clickOnLink;
	}
}


//---------------------------------------------------------------------------------------------
//	parseISODate()
//	Parse a date string in ISO 8601 format (YYYY-MM-DDTHH:MM:SS+OO:OO) into a Date object.
//---------------------------------------------------------------------------------------------
function parseISODate(dateToParse){
	var returnDate = new Date();
	if(dateToParse && dateToParse.length>1 && dateToParse.match(/^\d\d\d\d-\d\d-\d\d/)){
        // separate date and time
        var dateTime=dateToParse.split("T");
        // set the date
        var dateArray = dateTime[0].split("-");
        if(dateArray[1]) returnDate.setMonth(dateArray[1]-1);
        if(dateArray[2]) returnDate.setDate(dateArray[2]);
        if(dateArray[0]) returnDate.setYear(dateArray[0]);
        // split time and offset
        var timeArray = null;
        if(dateTime[1]) timeArray=dateTime[1].match(/(\d\d):(\d\d):(\d\d)(?:\.\d+)?(?:([+-])(\d\d):(\d\d))?/);
        if(timeArray){
            // set the time
            if(timeArray[1]) returnDate.setHours(timeArray[1]);
            if(timeArray[2]) returnDate.setMinutes(timeArray[2]);
            if(timeArray[3]) returnDate.setSeconds(timeArray[3]);
            // add the offset
            if(timeArray[4] && timeArray[5]){
                var time = returnDate.getTime() - returnDate.getTimezoneOffset() * 60000;
                if(timeArray[4]=="+")
                    time -= timeArray[5] * 3600000;
                else
                    time += timeArray[5] * 3600000;
                returnDate.setTime(time);
            }
		}
	}
	return returnDate;
}

//---------------------------------------------------------------------------------------------
//	parseAtomFeed()
//	Parse an Atom feed into the results array.
//---------------------------------------------------------------------------------------------
function parseAtomFeed(atom)
{
	var results = new Array;
	feed.baseURL = {protocol: "", domain: "", resource: ""};

	// For each element, get title, link and publication date. 
	// Note that all elements of an item are optional. 
	for(var item = atom.firstChild; item != null; item = item.nextSibling) {
		if( item.nodeName == 'entry' ) {
			var title = findChild(item, 'title');

			// we have to have the title to include the item in the list 
			if( title && title.firstChild ) {
				// Just get the first link for now - Atom is complicated
				var link;
				var linkElement = findChild(item, 'link');
				if (linkElement) {
					link = linkElement.getAttribute("href");
				}

				// Try a few different ways to find a date
				var pubDate;
				var updatedElement = findChild(item, 'updated');
				if (updatedElement == null) { updatedElement = findChild(item, "issued"); }
				if (updatedElement == null) { updatedElement = findChild(item, "modified"); }
				if (updatedElement == null) { updatedElement = findChild(item, "created"); }		
				if (updatedElement) {
					var isoDate = updatedElement.firstChild.data;
					pubDate = parseISODate(isoDate);
				}

				var description;
				var descElt = findChild(item, 'summary');
				if (descElt == null) { descElt = findChild(item, 'content'); }
				if (descElt && descElt.firstChild) {
					var contentType = descElt.getAttribute("type");
					if(contentType && (contentType.indexOf("xhtml")>-1 || contentType.indexOf("xml")>-1)){
						var xmlSerializer = new XMLSerializer();
						description = "";
						for(var f=0; f<descElt.childNodes.length; f++)
							description += xmlSerializer.serializeToString(descElt.childNodes[f]);
					}
					else{
						description = allData(descElt);
					}
				}
				results[results.length] = {title:title.firstChild.data, 
					link:link,
					date:pubDate,
					description:description
				}
			}
		}
	}
	
	return results;
}

//---------------------------------------------------------------------------------------------
//	parseRSSFeed()
//	Parse an RSS feed into the results array.
//---------------------------------------------------------------------------------------------
function parseRSSFeed(rss)
{
	var results = new Array;
	feed.baseURL = {protocol: "", domain: "", resource: ""};

	// Get global <link> element as base url
	var channel = findChild(rss, 'channel');
	if(channel){
		var mainLinkEl = findChild(channel, 'link');
		if(mainLinkEl){
			// split components of the url (protocol, domain, resource)
			var baseURL = allData(mainLinkEl);
			var components = baseURL.split("://");
			feed.baseURL.protocol = components[0];
			var slashIndex = components[1].indexOf("/");
			if(slashIndex>=0){
				feed.baseURL.domain = components[1].substring(0, slashIndex);
				feed.baseURL.resource = components[1].substring(slashIndex+1, components[1].length);
			}
			else feed.baseURL.domain = components[1];
		}
	}

	// Get all item elements.
	// For each element, get title, link and publication date. 
	// Note that all elements of an item are optional.
	var items = rss.getElementsByTagName("item");
	for (var i = 0; i < items.length; i++) {
		item = items[i];
		if (item.nodeName == 'item') {
			var title = findChild(item, 'title');

			// we have to have the title to include the item in the list 
			if(title != null) {
				var link = findChild(item, 'link');
				var pubDate = findChild(item, 'pubDate');
				// If there's a pubDate element, use it
				if (pubDate) {
					pubDate = new Date(Date.parse(allData(pubDate)));
				}
				// If not, maybe they're using the Dublin Core date element
				if (pubDate == null) {
					pubDate = findChild(item, "date", NS_DC);
					if (pubDate) {
						var isoDate = allData(pubDate);
						pubDate = parseISODate(isoDate);
					}
				}
				var description = findChild(item, 'encoded', NS_CONTENT);
				if (!description) {
					description = findChild(item, 'description');
				}
				results[results.length] = {title:title.firstChild.data, 
					link:(link ? allData(link) : null), 
					date:pubDate,
					description:(description != null ? allData(description) : null)
				}
			}
		}
	}
	
	return results;
}

//---------------------------------------------------------------------------------------------
//	allData()
//	Concatenate all the text data of a node's children.
//---------------------------------------------------------------------------------------------
function allData(node)
{
	var data = "";
	node = node.firstChild;
	if(node){
		if (node.data) data += node.data;
		while (node = node.nextSibling) {
			if (node.data) data += node.data;
		}
	}

	return data;
}

//---------------------------------------------------------------------------------------------
//	createRow()
//	Generate a new row for the content area.
//---------------------------------------------------------------------------------------------
function createRow(title, link, date, description, index)
{
	// create a DIV for the article
	var article = document.createElement('div');
	article.setAttribute('class', 'article ' + (index % 2 ? "even" : "odd"));
	// if it is not the last article, include a separation line 
	if(index>0){
		var articleseparator = document.createElement('div');
		articleseparator.setAttribute('class', 'articleseparator');
		article.appendChild(articleseparator);
	}

	// optionally, make the title a link
	var articlehead;
	if (link && link.length) {
		// if it is a relative link, make it absolute
		if(link.indexOf(":")<0) link = absoluteURL(link);
		// set the link
		articlehead = document.createElement('a');
		articlehead.onclick = clickOnLink;
		articlehead.setAttribute('href', link);
	}
	else {
		articlehead = document.createElement('span');
	}
	articlehead.setAttribute('class', 'articlehead');
	
	// title of the article
	var subject_div = document.createElement('div');
	subject_div.setAttribute('class', 'subject');
	subject_div.innerHTML = title;
	articlehead.appendChild(subject_div);
	
	// date of the article
	if (date != null) {
		var date_div = document.createElement('div');
		date_div.setAttribute ('class', 'date');
		if (showDate) {
			date_div.innerText = date2str(date);
		}
		
		articlehead.appendChild(date_div);
	}

	article.appendChild(articlehead);
	
	// main body of the article
	if (description != null) {
		var desc_div = document.createElement('div');
		desc_div.setAttribute('class', 'articlebody');
		desc_div.innerHTML = description;

		// Clean up hyperlinks
		fixLinks(desc_div);
		
		article.appendChild(desc_div);
	}
	
	return article;
}


//---------------------------------------------------------------------------------------------
//	absoluteURL()
//	Convert a relative URL into an absolute one
//---------------------------------------------------------------------------------------------
function absoluteURL(url){
	var baseURL = feed.baseURL.protocol + "://" +feed.baseURL.domain;
	// if it is absolute within the domain
	if(url.indexOf("/")==0) url = baseURL + url;
	// if it is relative to the current resorce
	else url = baseURL + "/" + feed.baseURL.resource + url;
	return url;
}

//---------------------------------------------------------------------------------------------
//	createDateStr()
//	Generate a date label from a JavaScript date.
//---------------------------------------------------------------------------------------------
function createDateStr(date)
{
	var month;
	switch (date.getMonth()) {
		case 0: month = 'Jan'; break;
		case 1: month = 'Feb'; break;
		case 2: month = 'Mar'; break;
		case 3: month = 'Apr'; break;
		case 4: month = 'May'; break;
		case 5: month = 'Jun'; break;
		case 6: month = 'Jul'; break;
		case 7: month = 'Aug'; break;
		case 8: month = 'Sep'; break;
		case 9: month = 'Oct'; break;
		case 10: month = 'Nov'; break;
		case 11: month = 'Dec'; break;
	}
	var dateMinute = date.getMinutes();
	var dateHour = date.getHours();
	var dateAMPM = ((dateHour > 12) ? "PM" : "AM");
	if(dateHour == 0) dateHour = 12;
	
    var dateStr = dateHour + ':' + 
	    ((dateMinute < 10) ? '0' + dateMinute : dateMinute) +
        dateAMPM + ' ' +  month + ' ' + date.getDate();
	
	return dateStr;
}

//---------------------------------------------------------------------------------------------
//	search()
//  Filter displayed items by searching a substring.
//---------------------------------------------------------------------------------------------
function search(searchEvent){
	// Set the new search string, escaping special rexexp characters
	var searchTerms = searchEvent.target.value;
	filterString=searchTerms.replace(/([\^\$\/\.\+\*\\\?\(\)\[\]\{\}\|])/ig, "\\$1");
	if(last_results && last_results.length){
		// Remove the current entries
		var contents = document.getElementById('content');
		removeEntriesFromContents(contents);
		// Filter entries
		var searchResults = filterEntries(last_results);
		// Got no results?
		if (searchResults == null || searchResults.length < 1) {
			showMessageInContents(contents, getLocalizedString("No Items Found"),
				getLocalizedString("No items matched the search terms."));
		}
		else{
			// Generate the display
			addEntriesToContents(contents, searchResults);
		}
		// update the scrollbar so scrollbar matches new data
		refreshScrollArea();
	}
}

//---------------------------------------------------------------------------------------------
//	clickOnLink()
//	Open in the browser instead of in the widget.
//---------------------------------------------------------------------------------------------
function clickOnLink()
{
	if (window.widget) {
		widget.openURL(this.href);
		return false;
	}
}

//---------------------------------------------------------------------------------------------
//	clickOnBottomRectangle()
//	For testing, refresh the feed on option-clicking the bottom border.
//---------------------------------------------------------------------------------------------
function clickOnBottomRectangle(event)
{
	if (event.altKey) {
		refreshFeed();
	}
}

//---------------------------------------------------------------------------------------------
//	scaleArticles()
//	Called by the article length slider.  Updates CSS to truncate articles.
//---------------------------------------------------------------------------------------------
function scaleArticles( value )
{
    var content = document.getElementById('content');
    content.style.appleLineClamp = value + "%";
}

//---------------------------------------------------------------------------------------------
//	endScale()
//	onmouseup handler for the scale articles slider.
//---------------------------------------------------------------------------------------------
function endScale()
{
	//refreshScrollArea();
}

//---------------------------------------------------------------------------------------------
//	scaleTo()
//	Called by the article length max and min buttons. Update slider and scale articles.
//---------------------------------------------------------------------------------------------
function scaleTo( value ) {
	slider.value = value;
	scaleArticles( value );
}

//---------------------------------------------------------------------------------------------
//	scaleToMin()
//	Called by the article length slider's minimum button.
//---------------------------------------------------------------------------------------------
function scaleToMin() {
	scaleTo( slider.getAttribute("min") );
}

//---------------------------------------------------------------------------------------------
//	scaleToMax()
//	Called by the article length slider's maximum button.
//---------------------------------------------------------------------------------------------
function scaleToMax() {
	scaleTo( slider.getAttribute("max") );
}

//---------------------------------------------------------------------------------------------
//	hideElement()
//	Turn off display for the given element.
//---------------------------------------------------------------------------------------------
function hideElement(elementId)
{
	var element = document.getElementById(elementId);
	if (element)
		element.style.display = "none";
}

//---------------------------------------------------------------------------------------------
//	showElement()
//	Turn on display for the given element.
//---------------------------------------------------------------------------------------------
function showElement(elementId)
{
	var element = document.getElementById(elementId);
	if (element)
		element.style.display = "block";
}

//---------------------------------------------------------------------------------------------
//	showLoadingMessage()
//	Display "Loading..." and start the dots animating.
//---------------------------------------------------------------------------------------------
function showLoadingMessage()
{
	showElement("loading-text");
	startLoadingAnimation();
}

//---------------------------------------------------------------------------------------------
//	hideLoadingMessage()
//	Get rid of the "Loading..." animation.
//---------------------------------------------------------------------------------------------
function hideLoadingMessage()
{
	stopLoadingAnimation();
	hideElement("loading-text");
}

//---------------------------------------------------------------------------------------------
//	setLoadingText()
//	Display a message in the "Loading" area.
//---------------------------------------------------------------------------------------------
function setLoadingText(loadingText)
{
	var loadingElement = document.getElementById("loading-text");
	if (loadingElement) {
		loadingElement.innerText = loadingText;
		showElement("loading-text");
	}
}

//---------------------------------------------------------------------------------------------
//	startLoadingAnimation()
//	Places animated "Loading..." text on the widget while the feed loads.
//---------------------------------------------------------------------------------------------
function startLoadingAnimation()
{
	var dots = 0;
	var animate_loading_dots = function ()
	{
		var loading = getLocalizedString("Loading");
		for (var i = 0; i < dots; i++) {
			loading = loading + ".";
		}
		setLoadingText(loading);
		
		if (++dots > 3) {
			dots = 0;
		}
	};
	
	animate_loading_dots();
	loading_animation_timer = setInterval(animate_loading_dots, 500);
}

//---------------------------------------------------------------------------------------------
//	stopLoadingAnimation()
//	Stop the "Loading..." animation.
//---------------------------------------------------------------------------------------------
function stopLoadingAnimation()
{
	if (loading_animation_timer != null) {
		clearInterval(loading_animation_timer);
		loading_animation_timer = null;
	}
}


//---------------------------------------------------------------------------------------------
//	Assign event handlers to widget actions.
//---------------------------------------------------------------------------------------------
if (window.widget) {
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
}
